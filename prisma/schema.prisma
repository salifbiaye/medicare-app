// schema.prisma

generator client {
  provider = "prisma-client-js"
  // output   = "app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enumerations
enum Role {
  PATIENT
  DOCTOR
  CHIEF_DOCTOR
  SECRETARY
  DIRECTOR
  ADMIN
}

enum ServiceType {
  GENERAL_PRACTICE
  OPHTHALMOLOGY
  CARDIOLOGY
  PEDIATRICS
  DERMATOLOGY
  NEUROLOGY
  ORTHOPEDICS
  GYNECOLOGY
  RADIOLOGY
  PSYCHIATRY
  UROLOGY
  ENT // Ear, Nose, and Throat
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  TRANSFERRED
  COMPLETED
}

enum PrescriptionStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
}

// Data models
model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String
  birthDate        DateTime?
  profileCompleted Boolean   @default(false)
  phone            String?
  address          String?
  gender           Gender    @default(MALE)
  role             Role      @default(PATIENT)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Role-based relations
  patient               Patient?
  doctor                Doctor?
  secretary             Secretary?
  director              Director?
  sentRequests          AppointmentRequest[] @relation("PatientRequests")
  sentNotifications     Notification[]       @relation("SentNotifications")
  receivedNotifications Notification[]       @relation("ReceivedNotifications")
  emailVerified         Boolean
  image                 String?
  sessions              Session[]
  accounts              Account[]

  @@map("users")
}

model Patient {
  id                   String  @id @default(cuid())
  userId               String  @unique
  socialSecurityNumber String?
  bloodGroup           String?
  allergies            String?

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  medicalRecord MedicalRecord?
  appointments  Appointment[]
  prescriptions Prescription[]

  @@map("patients")
}

model Doctor {
  id                 String      @id @default(cuid())
  userId             String      @unique
  specialty          ServiceType
  registrationNumber String      @unique
  availability       Json? // JSON format to store availability

  // Relations
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  hospital             Hospital             @relation(fields: [hospitalId], references: [id])
  hospitalId           String
  service              Service              @relation(fields: [serviceId], references: [id])
  serviceId            String
  appointments         Appointment[]
  medicalReports       MedicalReport[]
  prescriptionsCreated Prescription[]
  assignedRequests     AppointmentRequest[] @relation("DoctorRequests")
  sharedDicoms         DicomSharing[]       @relation("DoctorSharing")
  receivedDicoms       DicomSharing[]       @relation("DoctorReception")

  @@map("doctors")
}

model Secretary {
  id     String @id @default(cuid())
  userId String @unique

  // Relations
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  service         Service              @relation(fields: [serviceId], references: [id])
  serviceId       String
  hospital        Hospital             @relation(fields: [hospitalId], references: [id])
  hospitalId      String
  managedRequests AppointmentRequest[] @relation("SecretaryRequests")

  @@map("secretaries")
}

model Director {
  id     String @id @default(cuid())
  userId String @unique

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  hospital   Hospital @relation(fields: [hospitalId], references: [id])
  hospitalId String   @unique

  @@map("directors")
}

model Hospital {
  id         String   @id @default(cuid())
  name       String
  urlOrthanc String   @default("")
  address    String
  phone      String   @unique
  email      String?  @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  services            Service[]
  doctors             Doctor[]
  secretaries         Secretary[]
  directors           Director[]
  appointmentRequests AppointmentRequest[]

  @@map("hospitals")
}

model Service {
  id          String      @id @default(cuid())
  type        ServiceType
  name        String?
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  hospital            Hospital             @relation(fields: [hospitalId], references: [id])
  hospitalId          String
  doctors             Doctor[]
  secretaries         Secretary[]
  appointmentRequests AppointmentRequest[]

  @@map("services")
}

model MedicalRecord {
  id          String   @id @default(cuid())
  patientId   String   @unique
  phoneNumber String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  patient        Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)
  medicalReports MedicalReport[]
  prescriptions  Prescription[]
  dicomImages    DicomImage[]

  @@map("medical_records")
}

model AppointmentRequest {
  id                String        @id @default(cuid())
  description       String
  status            RequestStatus @default(PENDING)
  existingRecord    Boolean       @default(false)
  identifiedService ServiceType?
  creationDate      DateTime      @default(now())
  modificationDate  DateTime      @updatedAt

  // Relations
  patient     User         @relation("PatientRequests", fields: [patientId], references: [id])
  patientId   String
  hospital    Hospital     @relation(fields: [hospitalId], references: [id])
  hospitalId  String
  service     Service?     @relation(fields: [serviceId], references: [id])
  serviceId   String?
  secretary   Secretary?   @relation("SecretaryRequests", fields: [secretaryId], references: [id])
  secretaryId String?
  doctor      Doctor?      @relation("DoctorRequests", fields: [doctorId], references: [id])
  doctorId    String?
  appointment Appointment?

  @@map("appointment_requests")
}

model Appointment {
  id        String   @id @default(cuid())
  date      DateTime
  duration  Int // Duration in minutes
  status    String   @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patient       Patient             @relation(fields: [patientId], references: [id])
  patientId     String
  doctor        Doctor              @relation(fields: [doctorId], references: [id])
  doctorId      String
  request       AppointmentRequest? @relation(fields: [requestId], references: [id])
  requestId     String?             @unique
  medicalReport MedicalReport?

  @@map("appointments")
}

model MedicalReport {
  id              String   @id @default(cuid())
  content         String
  diagnosis       String?
  recommendations String?
  createdAt       DateTime @default(now())

  // Relations
  medicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id])
  medicalRecordId String
  doctor          Doctor        @relation(fields: [doctorId], references: [id])
  doctorId        String
  appointment     Appointment   @relation(fields: [appointmentId], references: [id])
  appointmentId   String        @unique
  prescription    Prescription?

  @@map("medical_reports")
}

model Prescription {
  id        String             @id @default(cuid())
  content   String
  startDate DateTime           @default(now())
  endDate   DateTime?
  status    PrescriptionStatus @default(ACTIVE)
  createdAt DateTime           @default(now())

  // Relations
  patient         Patient        @relation(fields: [patientId], references: [id])
  patientId       String
  doctor          Doctor         @relation(fields: [doctorId], references: [id])
  doctorId        String
  medicalReport   MedicalReport? @relation(fields: [medicalReportId], references: [id])
  medicalReportId String?        @unique
  medicalRecord   MedicalRecord  @relation(fields: [medicalRecordId], references: [id])
  medicalRecordId String

  @@map("prescriptions")
}

model DicomImage {
  id          String   @id @default(cuid())
  orthanc_id  String   @unique // ID of the image on Orthanc server
  orthanc_url String   @default("")
  type        String
  description String?
  uploadDate  DateTime @default(now())

  // Relations
  medicalRecord   MedicalRecord  @relation(fields: [medicalRecordId], references: [id])
  medicalRecordId String
  sharings        DicomSharing[]

  @@map("dicom_images")
}

model DicomSharing {
  id          String   @id @default(cuid())
  sharingDate DateTime @default(now())
  isActive    Boolean  @default(true)

  // Relations
  dicomImage     DicomImage @relation(fields: [dicomImageId], references: [id])
  dicomImageId   String
  sourceDoctor   Doctor     @relation("DoctorSharing", fields: [sourceDoctorId], references: [id])
  sourceDoctorId String
  targetDoctor   Doctor     @relation("DoctorReception", fields: [targetDoctorId], references: [id])
  targetDoctorId String

  @@map("dicom_sharings")
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
  ERROR
  MESSAGE
  APPOINTMENT
  DOCUMENT
  SYSTEM
  PRESCRIPTION
  LAB
  VITAL
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationCategory {
  MEDICAL
  ADMINISTRATIVE
  SYSTEM
}

model Notification {
  id             String               @id @default(cuid())
  title          String
  message        String
  type           NotificationType
  priority       NotificationPriority @default(LOW)
  category       NotificationCategory
  read           Boolean              @default(false)
  actionRequired Boolean              @default(false)
  createdAt      DateTime             @default(now())
  expiresAt      DateTime?

  // Optional sender information
  senderId String?
  sender   User?   @relation("SentNotifications", fields: [senderId], references: [id])

  // Recipient information
  recipientId String
  recipient   User   @relation("ReceivedNotifications", fields: [recipientId], references: [id])

  @@index([recipientId, createdAt])
  @@index([type, priority])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("patient")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
